<?xml version="1.0" encoding="UTF-8"?>

<!-- 
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd"> 
-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">	
	<!-- 
		Spring AOP 설정 
		1. 주업무 객체 지정
		2. 보조업무 객체 지정
		3. 1+2 결합		
	-->
	
	<!-- 1. 주업무 객체 지정 -->
	<bean id="memo" class="com.test.spring.aop.Memo"></bean>
	
	<!-- 2. 보조업무 객체 지정 -->
	<bean id="logger" class="com.test.spring.aop.Logger"></bean>
	<bean id="auth" class="com.test.spring.aop.Auth"></bean>
	
	<!-- 3. 1+2 결합 -->
	<aop:config>
		
		<!-- 보조업무객체를 지정한다. > 자격 할당!! -->
		<aop:aspect id="loggerAdvice" ref="logger">
		
			<!--  
				주업무와 보조업무의 관계를 지정하는 작업
				- 주업무(memo.add())와 보조업무(logger.log())의 관계를 맺기
			-->
			
			<!-- 포인트컷(PointCut)을 지정한다. > AspectJ 표현식을 사용한다. -->
			<aop:pointcut expression="execution(public void com.test.spring.aop.Memo.add(String))" id="p1"/>
			<aop:pointcut expression="execution(public * com.test.spring.aop.Memo.*(..))" id="p3"/>
			
			<!-- 
				위빙(weaving) > 포인트컷과 보조업무를 결합
			-->
			<!-- <aop:after method="log" pointcut-ref="p3" /> --> <!-- Memo.add() + Logger.log() -->
			
			
			<aop:pointcut expression="execution(public * com.test.spring.aop.Memo.auth_add(..))" id="p6"/>
			<!-- <aop:around method="logTime" pointcut-ref="p3"/> -->
			
			
			
			
			<aop:pointcut expression="execution(public * com.test.spring.aop.Memo.*(..))" id="p7"/>
			<!-- <aop:after-throwing method="sendMail" pointcut-ref="p7" throwing="e" /> -->
			
			
			<aop:pointcut expression="execution(public * com.test.spring.aop.Memo.search(..))" id="p8"/>
			<aop:after-returning method="logSearch" pointcut-ref="p8" returning="obj" />
			
		
		</aop:aspect>
		
		
		<aop:aspect id="authAdvice" ref="auth">
		
			<aop:pointcut expression="execution(public void com.test.spring.aop.Memo.add(String))" id="p2"/>
			<!--  
				인증 검사 > 메모쓰기, 수정, 삭제
			-->
			<aop:pointcut expression="execution(public void com.test.spring.aop.Memo.add(String)) || execution(public void com.test.spring.aop.Memo.edit(int, String)) || execution(public void com.test.spring.aop.Memo.del(int))" id="p4"/>
			
			<aop:pointcut expression="execution(public void com.test.spring.aop.Memo.auth_*(..))" id="p5"/>
			
			<!-- <aop:pointcut expression="execution(* *.*(..))" id="p5"/> -->
			
			<!-- <aop:before method="auth" pointcut-ref="p5" /> -->
		
		</aop:aspect>
		
		
	</aop:config>
	
           
</beans>










